start: (definition)*

definition: IDENTIFIER [ "[" INT_LITERAL "]" ] "=" (structured_block | path | const | const_list | weird_list) [","]

structured_block: "{" (definition)* "}"
path: path_type path_value
path_type: IDENTIFIER
path_value: SINGLE_QUOTED_STRING

const_list: "{" [ANY_LITERAL ("," ANY_LITERAL)*] "}"
weird_list: "{" (",")* "}"
const: ANY_LITERAL | IDENTIFIER | call | DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING
call.1: IDENTIFIER "(" ANY_LITERAL ")"

// terminals
    IDENTIFIER: /\b[a-zA-Z_ \/][a-zA-Z0-9_ \/]*\b/

    ANY_LITERAL: NUMERIC_LITERAL | BOOL_LITERAL
    NUMERIC_LITERAL: ["+"|"-"] (INT_LITERAL | DOUBLE_LITERAL)

    BOOL_LITERAL: /\btrue\b|\bfalse\b/
    DOUBLE_LITERAL: /([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)/

    // int literal
        INT_LITERAL: DECIMAL_INT_LITERAL
            | HEXADECIMAL_INT_LITERAL
            | BINARY_INT_LITERAL

        DECIMAL_INT_LITERAL: /\b\d+\b/
        HEXADECIMAL_INT_LITERAL: /0x[0-9a-fA-F]+/
        BINARY_INT_LITERAL: /0b[01]+/
    // end int literal

    SINGLE_QUOTED_STRING.1: /'[^']*'/
    DOUBLE_QUOTED_STRING.1: /"[^']*"/

// end terminals

%import common.WS
%ignore WS // ignore whitespace